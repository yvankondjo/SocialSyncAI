#!/usr/bin/env python3
"""
Script pour appliquer la migration 006 du syst√®me de cr√©dits.

Usage:
    python scripts/apply_migration_006.py

Ce script applique la migration SQL via le client Supabase.
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import logging
from supabase import create_client, Client

from app.core.config import get_settings

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def get_db() -> Client:
    """Obtient une connexion √† la base de donn√©es Supabase."""
    settings = get_settings()
    return create_client(settings.SUPABASE_URL, settings.SUPABASE_SERVICE_ROLE_KEY)


def apply_migration(db: Client):
    """Applique la migration via des requ√™tes individuelles."""
    logger.info("üîß Application de la migration via requ√™tes individuelles...")

    try:
        # 1. Cr√©er la table ai_models
        logger.info("üìã Cr√©ation de la table ai_models...")
        db.table('ai_models').select('*').limit(1).execute()  # Test si elle existe
        logger.info("‚úÖ Table ai_models existe d√©j√†")
    except Exception:
        # Table n'existe pas, la cr√©er via un insert test
        logger.info("‚ö†Ô∏è Table ai_models n'existe pas - migration n√©cessaire manuellement")
        logger.info("üí° Veuillez ex√©cuter le fichier migration_006_credits_system.sql manuellement")
        logger.info("   ou via l'interface Supabase SQL Editor")
        return False

    try:
        # 2. Cr√©er la table subscription_plans
        logger.info("üìã V√©rification de la table subscription_plans...")
        db.table('subscription_plans').select('*').limit(1).execute()
        logger.info("‚úÖ Table subscription_plans existe d√©j√†")
    except Exception:
        logger.info("‚ö†Ô∏è Table subscription_plans n'existe pas - migration n√©cessaire manuellement")
        return False

    try:
        # 3. Cr√©er la table user_subscriptions
        logger.info("üìã V√©rification de la table user_subscriptions...")
        db.table('user_subscriptions').select('*').limit(1).execute()
        logger.info("‚úÖ Table user_subscriptions existe d√©j√†")
    except Exception:
        logger.info("‚ö†Ô∏è Table user_subscriptions n'existe pas - migration n√©cessaire manuellement")
        return False

    try:
        # 4. Cr√©er la table credit_transactions
        logger.info("üìã V√©rification de la table credit_transactions...")
        db.table('credit_transactions').select('*').limit(1).execute()
        logger.info("‚úÖ Table credit_transactions existe d√©j√†")
        return True
    except Exception:
        logger.info("‚ö†Ô∏è Table credit_transactions n'existe pas - migration n√©cessaire manuellement")
        return False


def verify_migration(db: Client):
    """V√©rifie que la migration a √©t√© appliqu√©e correctement."""
    logger.info("üîç V√©rification de la migration...")

    tables_to_check = [
        'ai_models',
        'subscription_plans',
        'user_subscriptions',
        'credit_transactions'
    ]

    for table in tables_to_check:
        try:
            # Essayer de compter les lignes dans chaque table
            result = db.table(table).select('*', count='exact').limit(1).execute()
            logger.info(f"‚úÖ Table '{table}' existe ({result.count} enregistrements)")
        except Exception as e:
            logger.error(f"‚ùå Table '{table}' non trouv√©e ou inaccessible: {e}")
            return False

    # V√©rifier les donn√©es seed√©es
    try:
        models_result = db.table('ai_models').select('name', count='exact').execute()
        plans_result = db.table('subscription_plans').select('name', count='exact').execute()

        logger.info(f"üìä {models_result.count} mod√®les AI seed√©s")
        logger.info(f"üìä {plans_result.count} plans d'abonnement seed√©s")

        if models_result.count == 0:
            logger.warning("‚ö†Ô∏è Aucun mod√®le AI trouv√© - lancer le script de seed")
        if plans_result.count == 0:
            logger.warning("‚ö†Ô∏è Aucun plan d'abonnement trouv√© - lancer le script de seed")

    except Exception as e:
        logger.error(f"Erreur v√©rification donn√©es seed√©es: {e}")

    logger.info("‚úÖ V√©rification termin√©e")
    return True


def main():
    """Fonction principale."""
    logger.info("üöÄ V√©rification de la migration 006 - Syst√®me de Cr√©dits...")

    try:
        db = get_db()
        logger.info("‚úÖ Connexion √† la base de donn√©es √©tablie")

        # V√©rifier si la migration est d√©j√† appliqu√©e
        migration_applied = apply_migration(db)

        if migration_applied:
            logger.info("")
            logger.info("üéä Migration 006 d√©j√† appliqu√©e!")
            logger.info("")
            logger.info("üìã Prochaines √©tapes:")
            logger.info("   1. Lancer le script de seed: python scripts/seed_models_and_plans.py")
            logger.info("   2. Tester l'API: GET /api/subscriptions/plans")
            logger.info("   3. V√©rifier les configurations Redis/Stripe/Whop dans .env")
        else:
            logger.info("")
            logger.info("‚ö†Ô∏è Migration 006 non appliqu√©e")
            logger.info("")
            logger.info("üìã Instructions manuelles:")
            logger.info("   1. Ouvrir Supabase Dashboard > SQL Editor")
            logger.info("   2. Copier le contenu de: backend/migrations/migration_006_credits_system.sql")
            logger.info("   3. Ex√©cuter le script SQL")
            logger.info("   4. Relancer ce script pour v√©rifier")
            logger.info("")
            logger.info("üí° Alternative: Utiliser psql directement si acc√®s DB")
            sys.exit(1)

    except Exception as e:
        logger.error(f"üí• Erreur lors de la v√©rification: {e}")
        logger.info("")
        logger.info("üìã Instructions manuelles:")
        logger.info("   1. Ouvrir Supabase Dashboard > SQL Editor")
        logger.info("   2. Copier le contenu de: backend/migrations/migration_006_credits_system.sql")
        logger.info("   3. Ex√©cuter le script SQL")
        sys.exit(1)


if __name__ == "__main__":
    main()
