#!/usr/bin/env python3
"""
Script pour comparer les deux approches de groupement de messages
"""
import asyncio
from datetime import datetime, timedelta
from app.db.session import get_db

async def compare_approaches():
    """Comparer les deux approches de groupement"""
    
    db = get_db()
    
    print("=== COMPARAISON DES APPROCHES DE GROUPEMENT ===\n")
    
    # Approche 1: Messages individuels + groupement en temps r√©el
    print("üîÑ APPROCHE 1: Messages individuels + Groupement temps r√©el")
    print("=" * 60)
    
    # Simuler une requ√™te pour grouper les messages
    individual_query = """
    WITH message_groups AS (
        SELECT 
            cm.id,
            cm.content,
            cm.created_at,
            c.id as conversation_id,
            -- Grouper par fen√™tres de 15 secondes
            DATE_TRUNC('second', cm.created_at) + 
            INTERVAL '15 seconds' * FLOOR(
                EXTRACT(EPOCH FROM (cm.created_at - DATE_TRUNC('minute', cm.created_at))) / 15
            ) as time_group
        FROM conversation_messages cm
        INNER JOIN conversations c ON cm.conversation_id = c.id
        WHERE cm.direction = 'inbound'
        AND cm.created_at >= NOW() - INTERVAL '7 days'
    )
    SELECT 
        conversation_id,
        time_group,
        COUNT(*) as message_count,
        STRING_AGG(content, ' | ') as concatenated_content
    FROM message_groups
    GROUP BY conversation_id, time_group
    HAVING COUNT(*) > 1
    ORDER BY time_group DESC
    LIMIT 10;
    """
    
    try:
        result1 = db.rpc('execute_sql', {'sql_query': individual_query}).execute()
        print(f"‚úÖ Groupes trouv√©s: {len(result1.data) if result1.data else 0}")
        print("‚úÖ Avantages:")
        print("   - Tra√ßabilit√© compl√®te de chaque message")
        print("   - Flexibilit√© du delta temporel")
        print("   - Debugging facile")
        print("   - Conformit√© aux webhooks originaux")
        print("‚ùå Inconv√©nients:")
        print("   - Stockage plus important")
        print("   - Requ√™tes plus complexes")
        print("   - Calculs en temps r√©el")
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
    
    print("\n" + "=" * 60)
    
    # Approche 2: Messages concat√©n√©s directement
    print("üîÑ APPROCHE 2: Messages concat√©n√©s en BDD")
    print("=" * 60)
    
    try:
        # V√©rifier si la table message_groups existe
        groups_result = db.table("message_groups").select("id, content, message_count, created_at").limit(5).execute()
        
        if groups_result.data:
            print(f"‚úÖ Groupes stock√©s: {len(groups_result.data)}")
            print("‚úÖ Avantages:")
            print("   - Performance optimale")
            print("   - Stockage r√©duit")
            print("   - Requ√™tes simples")
            print("   - Coh√©rence traitement/stockage")
            print("‚ùå Inconv√©nients:")
            print("   - Perte de granularit√©")
            print("   - Debugging difficile")
            print("   - Delta fixe")
            print("   - Non-conformit√© aux webhooks")
        else:
            print("‚ö†Ô∏è  Table message_groups non trouv√©e - migration n√©cessaire")
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
    
    print("\n" + "=" * 60)
    
    # Approche 3: Hybride (recommand√©e)
    print("üîÑ APPROCHE 3: HYBRIDE (Recommand√©e)")
    print("=" * 60)
    print("‚úÖ Combine le meilleur des deux:")
    print("   - Messages individuels pour tra√ßabilit√©")
    print("   - Groupes concat√©n√©s pour performance")
    print("   - Analytics flexibles")
    print("   - Debugging possible")
    print("   - Stockage optimis√©")
    
    print("\n=== RECOMMANDATION FINALE ===")
    print("üéØ Utiliser l'approche HYBRIDE car elle offre:")
    print("   1. Tra√ßabilit√© compl√®te (messages individuels)")
    print("   2. Performance optimale (groupes pr√©-calcul√©s)")
    print("   3. Flexibilit√© d'analyse")
    print("   4. Facilit√© de debugging")
    print("   5. Conformit√© aux standards")
    
    print("\n=== IMPL√âMENTATION ===")
    print("1. Cr√©er la table message_groups (migration SQL)")
    print("2. Modifier le processeur de messages pour l'approche hybride")
    print("3. Ajouter un cron job pour finaliser les groupes expir√©s")
    print("4. Cr√©er des endpoints pour analyser les deux vues")

if __name__ == "__main__":
    asyncio.run(compare_approaches())





