#!/usr/bin/env python3
"""
Script de cr√©ation des produits Stripe pour l'architecture hybride.

Ce script cr√©e automatiquement les produits et prix dans Stripe avec les m√©tadonn√©es
n√©cessaires pour l'architecture hybride (cr√©dits, features, etc.).

Usage:
    python scripts/create_stripe_products.py [--dry-run] [--force]

Options:
    --dry-run: Affiche ce qui serait cr√©√© sans rien faire
    --force: Supprime et recr√©e les produits existants

Le script doit √™tre ex√©cut√© APR√àS avoir configur√© les variables d'environnement Stripe.
"""

import sys
import os
import json
import argparse
from typing import List, Dict, Any

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import logging
from supabase import create_client, Client

from app.core.config import get_settings

# Configuration du logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Configuration des plans
PLANS = [
    {
        'name': 'Starter Plan',
        'description': 'Starter Plan with base features for starting with AI',
        'price_eur': 9.99,
        'trial_days': 7,
        'metadata': {
            'credits_monthly': '1000',
            'max_ai_calls_per_batch': '3',
            'storage_quota_mb': '10',
            'features': json.dumps({
                'text': True,
                'images': False,
                'audio': False
            }),
            'plan_name': 'Starter',
            'tier': 'starter',
            'trial_duration_days': '7'
        }
    },
    {
        'name': 'Pro Plan',
        'description': 'Pro Plan with image processing for creatives',
        'price_eur': 29.99,
        'trial_days': 7,
        'metadata': {
            'credits_monthly': '2500',
            'max_ai_calls_per_batch': '5',
            'storage_quota_mb': '20',
            'features': json.dumps({
                'text': True,
                'images': True,
                'audio': False
            }),
            'plan_name': 'Pro',
            'tier': 'pro',
            'trial_duration_days': '7'
        }
    },
    {
        'name': 'Plus Plan',
        'description': 'Plus Plan with audio for professionals',
        'price_eur': 49.99,
        'trial_days': 7,
        'metadata': {
            'credits_monthly': '6000',
            'max_ai_calls_per_batch': '8',
            'storage_quota_mb': '40',
            'features': json.dumps({
                'text': True,
                'images': True,
                'audio': True
            }),
            'plan_name': 'Plus',
            'tier': 'plus',
            'trial_duration_days': '7'
        }
    }
]


def get_stripe_client():
    """Obtient le client Stripe configur√©."""
    try:
        import stripe
        settings = get_settings()

        if not hasattr(settings, 'STRIPE_SECRET_KEY') or not settings.STRIPE_SECRET_KEY:
            raise ValueError("STRIPE_SECRET_KEY non configur√©")

        stripe.api_key = settings.STRIPE_SECRET_KEY
        return stripe
    except ImportError:
        logger.error("‚ùå Stripe non install√©. Installez avec: pip install stripe")
        sys.exit(1)
    except Exception as e:
        logger.error(f"‚ùå Erreur configuration Stripe: {e}")
        sys.exit(1)


def get_db() -> Client:
    """Obtient une connexion √† la base de donn√©es Supabase."""
    try:
        settings = get_settings()
        return create_client(settings.SUPABASE_URL, settings.SUPABASE_SERVICE_ROLE_KEY)
    except Exception as e:
        logger.error(f"‚ùå Erreur connexion Supabase: {e}")
        sys.exit(1)


def find_existing_products(stripe, db):
    """Trouve les produits existants dans Stripe et Supabase."""
    try:
        # Produits dans Stripe
        stripe_products = stripe.Product.list(limit=100)
        stripe_product_ids = {p['id']: p for p in stripe_products['data']}

        # Produits dans Supabase
        result = db.table('products').select('id, name, source').eq('source', 'stripe').execute()
        supabase_products = {p['id']: p for p in result.data}

        return stripe_product_ids, supabase_products
    except Exception as e:
        logger.error(f"Erreur r√©cup√©ration produits existants: {e}")
        return {}, {}


def create_stripe_product(stripe, plan: Dict[str, Any], dry_run: bool = False):
    """Cr√©e un produit et un prix dans Stripe."""
    try:
        logger.info(f"üì¶ Cr√©ation produit Stripe: {plan['name']}")

        if dry_run:
            logger.info(f"   [DRY-RUN] Produit: {plan['name']}")
            logger.info(f"   [DRY-RUN] Prix: {plan['price_eur']}‚Ç¨/mois")
            logger.info(f"   [DRY-RUN] Cr√©dits: {plan['metadata']['credits_monthly']}")
            return {
                'product': {
                    'id': f'dry-run-prod-{plan["name"].lower().replace(" ", "-")}',
                    'name': plan['name'],
                    'description': plan['description'],
                    'active': True,
                    'metadata': plan['metadata'],
                    'images': []
                },
                'price': {
                    'id': f'dry-run-price-{plan["name"].lower().replace(" ", "-")}',
                    'unit_amount': int(plan['price_eur'] * 100),
                    'currency': 'eur',
                    'type': 'recurring',
                    'active': True,
                    'recurring': {'interval': 'month', 'interval_count': 1, 'trial_period_days': plan.get('trial_days', 0)},
                    'metadata': {'plan_name': plan['name']}
                },
                'dry_run': True
            }

        # Cr√©er le produit
        product = stripe.Product.create(
            name=plan['name'],
            description=plan['description'],
            metadata=plan['metadata']
        )

        # Cr√©er le prix r√©current
        price = stripe.Price.create(
            product=product.id,
            unit_amount=int(plan['price_eur'] * 100),  # Convertir en centimes
            currency='eur',
            recurring={'interval': 'month'},
            metadata={'plan_name': plan['name'], 'trial_days': str(plan['trial_days'])}
        )

        logger.info(f"‚úÖ Produit cr√©√©: {product.id}")
        logger.info(f"‚úÖ Prix cr√©√©: {price.id} ({plan['price_eur']}‚Ç¨/mois)")

        return {'product': product, 'price': price}

    except Exception as e:
        logger.error(f"‚ùå Erreur cr√©ation produit {plan['name']}: {e}")
        raise


def sync_to_supabase(db, stripe_data: Dict[str, Any], dry_run: bool = False):
    """Synchronise les donn√©es Stripe vers Supabase."""
    try:
        product = stripe_data['product']
        price = stripe_data['price']

        if dry_run:
            logger.info(f"   [DRY-RUN] Sync DB produit: {product['id']}")
            return

        # Sync produit
        product_payload = {
            'id': product['id'],
            'active': product.get('active', True),
            'name': product.get('name'),
            'description': product.get('description'),
            'image': (product.get('images') or [None])[0],
            'metadata': product.get('metadata', {}),
            'source': 'stripe'
        }

        product_result = db.table('products').upsert(product_payload).execute()
        product_error = getattr(product_result, 'error', None)
        if product_error:
            raise RuntimeError(f"Supabase upsert produit {product['id']} a √©chou√©: {product_error}")

        if getattr(product_result, 'data', None) is None:
            logger.warning(f"Upsert produit {product['id']} n'a pas retourn√© de donn√©es (peut-√™tre d√©j√† pr√©sent)")

        # Sync prix
        price_recurring = price.get('recurring') or {}
        price_payload = {
            'id': price['id'],
            'product_id': product['id'],
            'active': price.get('active', True),
            'description': price.get('metadata', {}).get('plan_name'),
            'unit_amount': price['unit_amount'],
            'currency': price['currency'],
            'type': price.get('type', 'recurring'),
            'interval': price_recurring.get('interval'),
            'interval_count': price_recurring.get('interval_count', 1),
            'trial_period_days': price_recurring.get('trial_period_days'),
            'metadata': price.get('metadata', {})
        }

        price_result = db.table('prices').upsert(price_payload).execute()
        price_error = getattr(price_result, 'error', None)
        if price_error:
            raise RuntimeError(f"Supabase upsert prix {price['id']} a √©chou√©: {price_error}")

        if getattr(price_result, 'data', None) is None:
            logger.warning(f"Upsert prix {price['id']} n'a pas retourn√© de donn√©es (peut-√™tre d√©j√† pr√©sent)")

        logger.info(f"‚úÖ Sync DB termin√©e pour {product['id']}")

    except Exception as e:
        logger.error(f"‚ùå Erreur sync DB pour {product['id']}: {e}")
        raise


def delete_existing_products(stripe, db, stripe_products, supabase_products, force: bool = False):
    """Supprime les produits existants si force=True."""
    if not force:
        return

    logger.warning("üóëÔ∏è  Suppression des produits existants (--force activ√©)")

    try:
        # Supprimer les prix d'abord
        for prod_id, product in stripe_products.items():
            prices = stripe.Price.list(product=prod_id, limit=10)
            for price in prices['data']:
                if not price.get('deleted', False):
                    logger.info(f"   Suppression prix: {price['id']}")
                    stripe.Price.modify(price['id'], active=False)

            # Supprimer le produit
            logger.info(f"   Suppression produit: {prod_id}")
            stripe.Product.modify(prod_id, active=False)

        # Supprimer de Supabase
        for prod_id in supabase_products:
            db.table('products').delete().eq('id', prod_id).execute()
            db.table('prices').delete().eq('product_id', prod_id).execute()

        logger.info("‚úÖ Produits existants supprim√©s")

    except Exception as e:
        logger.error(f"‚ùå Erreur suppression produits: {e}")
        raise


def main():
    """Fonction principale."""
    parser = argparse.ArgumentParser(description='Cr√©er des produits Stripe pour l\'architecture hybride')
    parser.add_argument('--dry-run', action='store_true', help='Affiche les actions sans les ex√©cuter')
    parser.add_argument('--force', action='store_true', help='Supprime et recr√©e les produits existants')

    args = parser.parse_args()

    logger.info("üöÄ D√©marrage cr√©ation produits Stripe")
    logger.info(f"   Mode dry-run: {args.dry_run}")
    logger.info(f"   Mode force: {args.force}")

    # Initialisation clients
    stripe = get_stripe_client()
    db = get_db()

    try:
        # V√©rifier produits existants
        stripe_products, supabase_products = find_existing_products(stripe, db)

        if stripe_products and not args.force:
            logger.warning(f"‚ö†Ô∏è  {len(stripe_products)} produits existent d√©j√† dans Stripe")
            logger.warning("   Utilisez --force pour les supprimer et recr√©er")
            logger.warning("   Ou --dry-run pour voir ce qui serait cr√©√©")
            return

        # Supprimer produits existants si force
        if args.force:
            delete_existing_products(stripe, db, stripe_products, supabase_products, args.force)

        # Cr√©er les produits
        created_products = []
        for plan in PLANS:
            try:
                stripe_data = create_stripe_product(stripe, plan, args.dry_run)
                sync_to_supabase(db, stripe_data, args.dry_run)
                created_products.append(stripe_data)

                if not args.dry_run:
                    logger.info(f"‚úÖ {plan['name']} cr√©√© avec succ√®s")

            except Exception as e:
                logger.error(f"‚ùå √âchec cr√©ation {plan['name']}: {e}")
                if not args.force:  # Arr√™ter si pas en mode force
                    raise

        # R√©sum√©
        logger.info("\nüìä R√©sum√©:")
        logger.info(f"   Produits cr√©√©s: {len(created_products)}")
        logger.info(f"   Mode: {'DRY-RUN' if args.dry_run else 'PRODUCTION'}")

        if not args.dry_run:
            logger.info("\nüéØ Prochaines √©tapes:")
            logger.info("   1. Configurer les webhooks Stripe dans le dashboard")
            logger.info("   2. Tester les webhooks avec des √©v√©nements de test")
            logger.info("   3. Ex√©cuter le script de migration des donn√©es existantes")

    except Exception as e:
        logger.error(f"‚ùå Erreur g√©n√©rale: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
