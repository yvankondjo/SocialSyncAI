#!/usr/bin/env python3
"""
Script de test pour v√©rifier l'enforcement du quota c√¥t√© backend lors de l'upload.
"""

import os
import sys
import asyncio
import io
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from fastapi.testclient import TestClient
from app.main import app
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_upload_with_quota():
    """Test l'upload avec v√©rification du quota."""
    
    client = TestClient(app)
    
    logger.info("üß™ Test 1: Upload fichier valide")
    
    # Cr√©er un fichier PDF test
    test_file_content = b"%PDF-1.4\nTest content for upload\n" * 100  # ~3KB
    test_file = io.BytesIO(test_file_content)
    
    # Tenter l'upload (n√©cessite une authentification)
    # Note: Ce test n√©cessite un token JWT valide
    logger.info("‚ö†Ô∏è Ce test n√©cessite une authentification valide")
    logger.info("   Pour tester manuellement:")
    logger.info("   1. Obtenir un JWT token valide")
    logger.info("   2. Utiliser curl ou Postman")
    
    logger.info("\nüìã Exemple de test manuel avec curl:")
    logger.info("""
    # 1. Cr√©er un fichier test
    echo "Test content" > test.txt
    
    # 2. Upload avec token
    curl -X POST "http://localhost:8000/api/knowledge_documents/upload" \\
      -H "Authorization: Bearer YOUR_JWT_TOKEN" \\
      -F "file=@test.txt"
    
    # 3. V√©rifier la r√©ponse (devrait inclure storage_usage)
    
    # 4. Cr√©er un gros fichier pour tester le quota
    dd if=/dev/zero of=big_file.txt bs=1M count=50
    
    # 5. Tenter l'upload (devrait √©chouer si quota < 50MB)
    curl -X POST "http://localhost:8000/api/knowledge_documents/upload" \\
      -H "Authorization: Bearer YOUR_JWT_TOKEN" \\
      -F "file=@big_file.txt"
    
    # R√©ponse attendue si quota d√©pass√©:
    # {
    #   "detail": "Quota de stockage insuffisant. Disponible: X.XX MB, Requis: Y.YY MB"
    # }
    """)
    
    logger.info("\n‚úÖ Points √† v√©rifier:")
    logger.info("  1. Upload refus√© si quota d√©pass√© (code 400)")
    logger.info("  2. Message d'erreur explicite avec d√©tails du quota")
    logger.info("  3. Pas d'insertion dans la DB si quota d√©pass√©")
    logger.info("  4. storage_used_mb non incr√©ment√© si upload √©choue")
    logger.info("  5. Upload r√©ussi si quota suffisant")
    logger.info("  6. storage_used_mb correctement incr√©ment√© apr√®s upload r√©ussi")

if __name__ == "__main__":
    logger.info("üöÄ Test de l'enforcement du quota c√¥t√© backend")
    test_upload_with_quota()
    logger.info("\n‚úÖ Guide de test cr√©√© avec succ√®s")


